{"version":3,"sources":["About.js","Projects.js","Links.js","MainInfo.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","className","Component","Links","Projects_LinkButtons","LinkButtons","name","style","url","map","el","i","Projects_LinkButton","key","LinkButton","this","props","Fragment","MainInfo","d","details","actIn","Projects","id","MainInfo_BoxInfo","index","title","label","divName","divTitle","BoxInfo","Content","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","setState","activeIndex","state","_this2","Content_MainButton","isActive","onClick","src_MainInfo","MainButton","_this3","bind","assertThisInitialized","App","divStyle","height","window","innerHeight","src_Content","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21657e40.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass About extends Component {\n  render() {\n\n    return(\n      <div className=\"animated fadeIn\">\n        <h2>Zich</h2>\n        <p className='zich-subtitle'>* (rhymes with peach)</p>\n        <br />\n        <p>21</p>\n        <p>Homestuck in 2018</p>\n        <p>I draw and make web apps, check out my projects!</p>\n      </div>\n    )\n  }\n}\n\nexport default About;\n","import React, { Component } from 'react';\n\nclass Links extends Component {\n  render() {\n\n    return(\n    <div className=\"animated fadeIn\">\n      <LinkButtons/>\n    </div>\n    )\n  }\n}\n\nclass LinkButtons extends Component {\n\n\n  render() {\n    const linkbtns = [\n      {name: 'HS Comic Maker', style: 'hscm', url: 'url'},\n      {name: 'HS Chittr gui', style: 'hsch', url: 'url'},\n      {name: 'Hiveswap Quirk Converter', style: 'hsqc', url: 'url'}\n    ]\n\n    return(\n      <div>\n        <br/>\n      { linkbtns.map((el, i) => {\n        return(\n          <LinkButton\n            key={ i }\n            name={el.name}\n            style={el.style}\n          />\n        )\n      })\n      }\n      <p>All of the code can be viewed on GitHub</p>\n      </div>\n    )\n  }\n}\n\nclass LinkButton extends Component {\n  render() {\n    const st = this.props.style\n    return(\n      <React.Fragment>\n        <button className={'linkbtns ' + this.props.style}>\n          {this.props.name}\n        </button>\n      </ React.Fragment>\n    )\n  }\n}\n\n\nexport default Links;\n","import React, { Component } from 'react';\n\nclass Links extends Component {\n  render() {\n\n    return(\n    <div className=\"animated fadeIn\">\n      <h3>-- CODE --</h3>\n      <p>Sburbd on Github</p>\n      <h3>-- TWITTER --</h3>\n      <p>Main Twitter</p>\n      <p>Art reblog Twitter</p>\n      <h3>-- DISCORD --</h3>\n      <p>Add me on Discord</p>\n      <p>HS JP/KOR study discord</p>\n\n    </div>\n    )\n  }\n}\n\nexport default Links;\n","import React, { Component } from 'react';\nimport About from './About.js';\nimport Projects from './Projects.js';\nimport Links from './Links.js';\n\n\nclass MainInfo extends Component{\n  render() {\n    const d = this.props.details\n    const actIn = this.props.actIn\n    const el = [About, Projects, Links]\n\n    return(\n      <div id='content'>\n        { d.map((details, i) => {\n          return(\n            <BoxInfo\n              index={i}\n              key={details.id}\n              id={details.id + '-content'}\n              actIn={actIn}\n              title={details.label}\n              divName={details.divName}\n              divTitle={el[i]}\n            />\n          )\n        }) }\n      </div>\n    )\n\n  }\n}\n\nclass BoxInfo extends Component{\n  render() {\n\n    return(\n    <div id={this.props.id}\n    className={(this.props.actIn === this.props.index ? 'visible' : 'invisible')}>\n\n      { <this.props.divTitle /> }\n    </div>\n    )\n  }\n}\n\nexport default MainInfo;\n","import React, { Component } from 'react';\nimport MainInfo from './MainInfo.js';\n\nclass Content extends Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeIndex: 0\n    };\n  }\n\n  handleClick = (index) => this.setState({ activeIndex: index })\n\n  render() {\n    const details = [\n      {id:'about', label:'About'},\n      {id:'projects', label:'projects'},\n      {id:'links', label:'links'}\n    ]\n\n    return(\n      <React.Fragment>\n      <div id='btn-container'>\n        { details.map((details, i) => {\n          return(\n            <MainButton\n              key={details.id}\n              id={details.id}\n              index={ i }\n              isActive={ this.state.activeIndex === i }\n              label={details.label}\n              onClick={this.handleClick}\n            />\n          )\n        }) }\n      </div>\n\n      <MainInfo handleClick={this.handleClick} details={details} actIn={this.state.activeIndex} />\n      </React.Fragment>\n    )\n  }\n}\n\nclass MainButton extends Component{\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick = () => this.props.onClick(this.props.index)\n\n  render() {\n    return(\n      <button id={this.props.id} onClick={this.handleClick}\n        className={'buttons ' + (this.props.isActive ? 'active-btn' : 'default-btn')}>\n         {this.props.label}\n      </button>\n    )\n  }\n}\n\nexport default Content;\n","import React, { Component } from 'react';\nimport Content from './Content.js';\nimport './App.css';\nimport './mediaq.css';\nimport './Buttons.css';\n\nclass App extends Component {\n\n\n  render() {\n\n    const divStyle = {\n      height: window.innerHeight\n    };\n\n    return (\n      <div className='page' style={divStyle}>\n        <div className='main animated fadeInBottom'>\n          <Content />\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}